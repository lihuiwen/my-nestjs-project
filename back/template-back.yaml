AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'NestJS API Lambda Deployment with VPC and Database Access'

# ========================================
# PARAMETERS - ËæìÂÖ•ÂèÇÊï∞
# ========================================
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Deployment environment
  
  DatabaseName:
    Type: String
    Default: nestjs_db
    Description: Database name
  
  DatabaseUsername:
    Type: String
    Description: Database master username
  
  DatabasePassword:
    Type: String
    NoEcho: true
    Description: Database master password

  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub Personal Access Token

# ========================================
# CONDITIONS - Êù°‰ª∂Âà§Êñ≠
# ========================================

# ========================================
# GLOBALS - ÂÖ®Â±ÄÈÖçÁΩÆ
# ========================================
Globals:
  Function:
    Timeout: 30
    MemorySize: 1536  # üìç Â¢ûÂä†ÂÜÖÂ≠ò‰ª•ÊîØÊåÅ NestJS + Prisma
    Runtime: nodejs20.x
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        ALLOWED_GITHUB_ENDPOINTS: "api.github.com/user/repos,api.github.com/users"
        # üìç Prisma Áõ∏ÂÖ≥ÁéØÂ¢ÉÂèòÈáè
        PRISMA_CLI_BINARY_TARGETS: "rhel-openssl-3.0.x"
        GITHUB_TOKEN: !Ref GitHubToken

# ========================================
# RESOURCES - ËµÑÊ∫êÂÆö‰πâ
# ========================================
Resources:

  # =====================================
  # VPC CONFIGURATION - VPCÈÖçÁΩÆ
  # =====================================
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'

  # =====================================
  # INTERNET GATEWAY - ‰∫íËÅîÁΩëÁΩëÂÖ≥
  # =====================================
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # =====================================
  # NAT GATEWAY - NATÁΩëÂÖ≥ÈÖçÁΩÆ
  # =====================================
  # NAT Gateway Elastic IP
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  # NAT Gateway for private subnet internet access
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  # =====================================
  # SUBNETS - Â≠êÁΩëÈÖçÁΩÆ
  # =====================================
  
  # Public Subnet (for NAT Gateway)
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-subnet'

  # Private Subnets for Lambda deployment
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-subnet-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-subnet-2'

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-subnet-3'

  # Database Subnets
  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.5.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-subnet-1'

  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.6.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-subnet-2'

  # =====================================
  # ROUTE TABLES - Ë∑ØÁî±Ë°®ÈÖçÁΩÆ
  # =====================================
  
  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-routes'

  # Default route for public subnet (to Internet Gateway)
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate public subnet with public route table
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-routes'

  # Default route for private subnets (to NAT Gateway)
  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # Associate private subnets with private route table
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

  # =====================================
  # SECURITY GROUPS - ÂÆâÂÖ®ÁªÑÈÖçÁΩÆ
  # =====================================
  
  # Lambda Security Group
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-lambda-sg'
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupEgress:
        # Allow HTTPS outbound for GitHub API access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS outbound for GitHub API
        # Allow HTTP outbound for package downloads
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP outbound
        # Allow DNS outbound (UDP)
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
          Description: DNS resolution (UDP)
        # Allow DNS outbound (TCP)
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
          Description: DNS resolution (TCP)
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-lambda-sg'

  # Database Security Group
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-database-sg'
      GroupDescription: Security group for RDS database
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-database-sg'
  
  # ÂçïÁã¨ÂàõÂª∫ÂÆâÂÖ®ÁªÑËßÑÂàôÔºåÈÅøÂÖçÂæ™ÁéØ‰æùËµñ
  DatabaseSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DatabaseSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Description: PostgreSQL access from Lambda

  LambdaSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !Ref DatabaseSecurityGroup
      Description: PostgreSQL access to database

  # =====================================
  # DATABASE INFRASTRUCTURE - Êï∞ÊçÆÂ∫ìÂü∫Á°ÄËÆæÊñΩ
  # =====================================
  
  # Database Subnet Group
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref DatabaseSubnet1
        - !Ref DatabaseSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-subnet-group'

  # üìç Êñ∞Â¢ûÔºöRDS ÈõÜÁæ§ÂèÇÊï∞ÁªÑ
  DatabaseClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: Parameter group for PostgreSQL cluster
      Family: aurora-postgresql16
      Parameters:
        log_statement: "all"
        log_min_duration_statement: 1000

  # üìç Êñ∞Â¢ûÔºöRDS ÈõÜÁæ§
  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Sub '${AWS::StackName}-cluster'
      Engine: aurora-postgresql
      EngineVersion: '16.1'
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      DatabaseName: !Ref DatabaseName
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      DBClusterParameterGroupName: !Ref DatabaseClusterParameterGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "03:00-04:00"
      PreferredMaintenanceWindow: "sun:04:00-sun:05:00"
      DeletionProtection: false
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-cluster'
        - Key: Environment
          Value: !Ref Environment

  # üìç Êñ∞Â¢ûÔºöRDS ÂÆû‰æã
  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-instance-1'
      DBClusterIdentifier: !Ref DatabaseCluster
      DBInstanceClass: db.t3.micro
      Engine: aurora-postgresql
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-instance-1'
        - Key: Environment
          Value: !Ref Environment

  # =====================================
  # APPLICATION SERVICES - Â∫îÁî®ÊúçÂä°
  # =====================================
  
  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      EndpointConfiguration:
        Type: REGIONAL

  # üìç ÁÆÄÂåñÁöÑ Lambda LayerÔºàÂè™ÂåÖÂê´ÊúÄÂü∫Êú¨ÁöÑËøêË°åÊó∂‰æùËµñÔºâ
  # NestLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: !Sub '${AWS::StackName}-runtime-deps'
  #     Description: "Minimal runtime dependencies"
  #     ContentUri: layers/nest/
  #     CompatibleRuntimes:
  #       - nodejs20.x
  #     RetentionPolicy: Retain
  #   Metadata:
  #     BuildMethod: nodejs20.x
  NodeModulesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: nest-dependencies
      Description: Node modules for Nest.js application
      ContentUri: layers/nest/
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Retain

  NestJSFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-nestjs-api'
      CodeUri: deploy/
      Handler: lambda.handler
      Runtime: nodejs20.x
      Timeout: 30
      MemorySize: 3008  # üìç ‰ΩøÁî®ÊúÄÂ§ßÂÖÅËÆ∏ÂÜÖÂ≠ò
      Layers:
        - !Ref NodeModulesLayer
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /{proxy+}
            Method: ANY
        # üìç Ê∑ªÂä†Ê†πË∑ØÂæÑÂ§ÑÁêÜ
        RootApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: ANY
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          GITHUB_API_WHITELIST_ENABLED: "true"
          # üìç ‰ΩøÁî®Êñ∞ÂàõÂª∫ÁöÑ RDS ÈõÜÁæ§Á´ØÁÇπ
          DATABASE_URL: !Sub 
            - "postgresql://${DatabaseUsername}:${DatabasePassword}@${ClusterEndpoint}:5432/${DatabaseName}"
            - ClusterEndpoint: !GetAtt DatabaseCluster.Endpoint.Address
          READ_DATABASE_URL: !Sub 
            - "postgresql://${DatabaseUsername}:${DatabasePassword}@${ClusterEndpoint}:5432/${DatabaseName}"
            - ClusterEndpoint: !GetAtt DatabaseCluster.Endpoint.Address
          # üìç Prisma Áõ∏ÂÖ≥ÁéØÂ¢ÉÂèòÈáè
          PRISMA_CLI_BINARY_TARGETS: "rhel-openssl-3.0.x"
          # üìç ÊòéÁ°ÆÊåáÂÆö binary Êñá‰ª∂‰ΩçÁΩÆ
          PRISMA_QUERY_ENGINE_LIBRARY: "/var/task/libquery_engine-rhel-openssl-3.0.x.so.node"
          # üìç Lambda ‰ºòÂåñÁéØÂ¢ÉÂèòÈáè
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps"
    Metadata:
      BuildMethod: nodejs20.x
      BuildProperties:
        # üìç Á¶ÅÁî® SAM ÁöÑ npm installÔºå‰ΩøÁî®Êàë‰ª¨È¢ÑÂÖàÂáÜÂ§áÁöÑÊñá‰ª∂
        SkipBuild: true

# ========================================
# OUTPUTS - ËæìÂá∫
# ========================================
Outputs:
  # API Gateway endpoint URL
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/'
    Export:
      Name: !Sub '${AWS::StackName}-api-url'

  # Lambda Function ARN
  LambdaFunctionArn:
    Description: Lambda Function ARN
    Value: !GetAtt NestJSFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-lambda-arn'

  # VPC ID for reference
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-vpc-id'

  # Database Security Group for RDS creation
  DatabaseSecurityGroupId:
    Description: Database Security Group ID
    Value: !Ref DatabaseSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-db-sg-id'

  # Database Subnet Group for RDS creation
  DatabaseSubnetGroupName:
    Description: Database Subnet Group Name
    Value: !Ref DatabaseSubnetGroup
    Export:
      Name: !Sub '${AWS::StackName}-db-subnet-group'

  # üìç Êñ∞Â¢ûÔºöÊï∞ÊçÆÂ∫ìÈõÜÁæ§‰ø°ÊÅØ
  DatabaseClusterEndpoint:
    Description: RDS Cluster Endpoint
    Value: !GetAtt DatabaseCluster.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-db-cluster-endpoint'

  DatabaseClusterPort:
    Description: RDS Cluster Port
    Value: !GetAtt DatabaseCluster.Endpoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-db-cluster-port'

  DatabaseClusterIdentifier:
    Description: RDS Cluster Identifier
    Value: !Ref DatabaseCluster
    Export:
      Name: !Sub '${AWS::StackName}-db-cluster-id'