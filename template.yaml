AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'NestJS API Lambda Deployment with Aurora Serverless v2 and VPC'

# ========================================
# PARAMETERS - 输入参数
# ========================================
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Deployment environment
  
  DatabaseName:
    Type: String
    Default: nestjs_db
    Description: Database name
  
  DatabaseUsername:
    Type: String
    Default: postgres
    Description: Database master username
  
  DatabasePassword:
    Type: String
    NoEcho: true
    Description: Database master password

  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub Personal Access Token

  # 🆕 新增 Serverless v2 扩缩容参数
  MinCapacity:
    Type: Number
    Default: 0
    Description: Minimum Aurora Serverless v2 capacity (ACUs) - 0 means auto-pause
    AllowedValues: [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8]

  MaxCapacity:
    Type: Number
    Default: 4
    Description: Maximum Aurora Serverless v2 capacity (ACUs)
    AllowedValues: [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 10, 12, 16, 20, 24, 28, 32]

# ========================================
# CONDITIONS - 条件判断
# ========================================
Conditions:
  IsProduction: !Equals [!Ref Environment, prod]

# ========================================
# GLOBALS - 全局配置
# ========================================
Globals:
  Function:
    Timeout: 30
    MemorySize: 1536
    Runtime: nodejs20.x
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        ALLOWED_GITHUB_ENDPOINTS: "api.github.com/user/repos,api.github.com/users"
        PRISMA_CLI_BINARY_TARGETS: "rhel-openssl-3.0.x"
        GITHUB_TOKEN: !Ref GitHubToken

# ========================================
# RESOURCES - 资源定义
# ========================================
Resources:

  # =====================================
  # VPC CONFIGURATION - VPC配置
  # =====================================
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'

  # =====================================
  # INTERNET GATEWAY - 互联网网关
  # =====================================
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # =====================================
  # NAT GATEWAY - NAT网关配置
  # =====================================
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  # =====================================
  # SUBNETS - 子网配置
  # =====================================
  
  # Public Subnet (for NAT Gateway)
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-subnet'

  # Private Subnets for Lambda deployment
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-subnet-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-subnet-2'

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-subnet-3'

  # Database Subnets
  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.5.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-subnet-1'

  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.6.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-subnet-2'

  # =====================================
  # ROUTE TABLES - 路由表配置
  # =====================================
  
  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-routes'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-routes'

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

  # Database Route Table (完全隔离，无外网访问)
  DatabaseRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-database-routes'
        - Key: Purpose
          Value: Database-Isolated

  # Database Subnet Route Table Associations (使用独立的数据库路由表)
  DatabaseSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnet1

  DatabaseSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnet2

  # =====================================
  # SECURITY GROUPS - 安全组配置
  # =====================================
  
  # Lambda Security Group
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-lambda-sg'
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS outbound for GitHub API
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP outbound
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
          Description: DNS resolution (UDP)
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
          Description: DNS resolution (TCP)
        # 🔧 明确的数据库访问规则将在下面单独定义
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-lambda-sg'

  # Database Security Group  
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-database-sg'
      GroupDescription: Security group for Aurora Serverless v2 database
      VpcId: !Ref VPC
      # 🔐 简化配置，避免循环依赖
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-database-sg'
  
  # 单独创建安全组规则，避免循环依赖
  DatabaseSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DatabaseSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Description: PostgreSQL access from Lambda

  # 添加Lambda到数据库的出站规则
  LambdaSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !Ref DatabaseSecurityGroup
      Description: PostgreSQL access to database

  # =====================================
  # DATABASE INFRASTRUCTURE - Aurora Serverless v2
  # =====================================
  
  # Database Subnet Group
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Aurora Serverless v2 database
      SubnetIds:
        - !Ref DatabaseSubnet1
        - !Ref DatabaseSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-subnet-group'

  # Aurora Serverless v2 集群参数组
  DatabaseClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: Parameter group for Aurora Serverless v2 PostgreSQL cluster
      Family: aurora-postgresql16
      Parameters:
        log_statement: "all"
        log_min_duration_statement: 1000
        shared_preload_libraries: "pg_stat_statements"

  # 🔧 Aurora Serverless v2 集群
  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Sub '${AWS::StackName}-serverless-cluster'
      Engine: aurora-postgresql
      EngineVersion: '16.4'  # 🔧 使用支持 0 ACU 的版本
      EngineMode: provisioned
      Port: 5432  # 🔧 明确设置PostgreSQL端口
      # 🆕 Serverless v2 扩缩容配置
      ServerlessV2ScalingConfiguration:
        MinCapacity: !Ref MinCapacity
        MaxCapacity: !Ref MaxCapacity
        SecondsUntilAutoPause: 300  # 5分钟无活动后自动暂停
      
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      DatabaseName: !Ref DatabaseName
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      DBClusterParameterGroupName: !Ref DatabaseClusterParameterGroup
      
      # 备份和维护配置
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "03:00-04:00"
      PreferredMaintenanceWindow: "sun:04:00-sun:05:00"
      DeletionProtection: false
      StorageEncrypted: true
      
      # Serverless v2 特有配置
      EnableHttpEndpoint: false
      ManageMasterUserPassword: false
      
      # 🔧 添加网络和连接配置
      EnableCloudwatchLogsExports:
        - postgresql
      
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-serverless-cluster'
        - Key: Environment
          Value: !Ref Environment
        - Key: Engine
          Value: Aurora-Serverless-v2

  # 🔧 Aurora Serverless v2 Writer 实例
  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-serverless-writer'
      DBClusterIdentifier: !Ref DatabaseCluster
      DBInstanceClass: db.serverless  # 🆕 Serverless v2 必须使用这个实例类
      Engine: aurora-postgresql
      PubliclyAccessible: false
      
      # 性能洞察配置
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7  # 免费版保留 7 天
      
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-serverless-writer'
        - Key: Environment
          Value: !Ref Environment
        - Key: Role
          Value: Writer

  # 🆕 可选：Aurora Serverless v2 Reader 实例（仅生产环境）
  DatabaseReaderInstance:
    Type: AWS::RDS::DBInstance
    Condition: IsProduction
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-serverless-reader'
      DBClusterIdentifier: !Ref DatabaseCluster
      DBInstanceClass: db.serverless
      Engine: aurora-postgresql
      PubliclyAccessible: false
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      PromotionTier: 2  # 独立扩缩容
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-serverless-reader'
        - Key: Environment
          Value: !Ref Environment
        - Key: Role
          Value: Reader

  # =====================================
  # APPLICATION SERVICES - 应用服务
  # =====================================
  
  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      EndpointConfiguration:
        Type: REGIONAL

  # Lambda Layer for Node Modules
  NodeModulesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-nest-dependencies'
      Description: Node modules for Nest.js application
      ContentUri: layers/nest/
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Retain

  # NestJS Lambda Function
  NestJSFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-nestjs-api'
      CodeUri: deploy/
      Handler: lambda.handler
      Runtime: nodejs20.x
      Timeout: 30
      MemorySize: 3008  # 使用最大允许内存
      Layers:
        - !Ref NodeModulesLayer
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /{proxy+}
            Method: ANY
        RootApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: ANY
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          GITHUB_API_WHITELIST_ENABLED: "true"
          # 🔧 简化数据库连接字符串配置
          DATABASE_URL: !Sub 
            - "postgresql://${DatabaseUsername}:${DatabasePassword}@${ClusterEndpoint}:5432/${DatabaseName}?schema=public&sslmode=require"
            - ClusterEndpoint: !GetAtt DatabaseCluster.Endpoint.Address
          READ_DATABASE_URL: !Sub 
            - "postgresql://${DatabaseUsername}:${DatabasePassword}@${ReaderEndpoint}:5432/${DatabaseName}?schema=public&sslmode=require"
            - ReaderEndpoint: !GetAtt DatabaseCluster.ReadEndpoint.Address
          # Prisma 相关环境变量
          PRISMA_CLI_BINARY_TARGETS: "rhel-openssl-3.0.x"
          PRISMA_QUERY_ENGINE_LIBRARY: "/var/task/libquery_engine-rhel-openssl-3.0.x.so.node"
          # Lambda 基础优化环境变量
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          NODE_OPTIONS: "--enable-source-maps"
          # 添加调试信息
          PRISMA_LOG_LEVEL: "warn"
          # 🔧 临时跳过数据库连接用于测试
          # SKIP_DB_CONNECTION: "true"
          # 确保数据库参数正确传递
          DATABASE_NAME: !Ref DatabaseName
          DATABASE_USERNAME: !Ref DatabaseUsername
          APP_REGION: !Ref AWS::Region
    Metadata:
      BuildMethod: nodejs20.x
      BuildProperties:
        SkipBuild: true

# ========================================
# OUTPUTS - 输出
# ========================================
Outputs:
  # API Gateway endpoint URL
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/'
    Export:
      Name: !Sub '${AWS::StackName}-api-url'

  # Lambda Function ARN
  LambdaFunctionArn:
    Description: Lambda Function ARN
    Value: !GetAtt NestJSFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-lambda-arn'

  # VPC ID
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-vpc-id'

  # 🔧 Aurora Serverless v2 相关输出
  DatabaseClusterEndpoint:
    Description: Aurora Serverless v2 Cluster Writer Endpoint
    Value: !GetAtt DatabaseCluster.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-db-cluster-endpoint'

  DatabaseClusterReaderEndpoint:
    Description: Aurora Serverless v2 Cluster Reader Endpoint
    Value: !GetAtt DatabaseCluster.ReadEndpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-db-cluster-reader-endpoint'

  DatabaseClusterPort:
    Description: Aurora Serverless v2 Cluster Port
    Value: !GetAtt DatabaseCluster.Endpoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-db-cluster-port'

  DatabaseClusterIdentifier:
    Description: Aurora Serverless v2 Cluster Identifier
    Value: !Ref DatabaseCluster
    Export:
      Name: !Sub '${AWS::StackName}-db-cluster-id'

  # 🆕 Serverless v2 特有信息
  ServerlessCapacityRange:
    Description: Aurora Serverless v2 Capacity Range
    Value: !Sub "${MinCapacity} - ${MaxCapacity} ACUs"
    Export:
      Name: !Sub '${AWS::StackName}-capacity-range'

  # Database Security Group
  DatabaseSecurityGroupId:
    Description: Database Security Group ID
    Value: !Ref DatabaseSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-db-sg-id'

  # Database Subnet Group
  DatabaseSubnetGroupName:
    Description: Database Subnet Group Name
    Value: !Ref DatabaseSubnetGroup
    Export:
      Name: !Sub '${AWS::StackName}-db-subnet-group'

  # Database Route Table (网络隔离)
  DatabaseRouteTableId:
    Description: Database Route Table ID (isolated from internet)
    Value: !Ref DatabaseRouteTable
    Export:
      Name: !Sub '${AWS::StackName}-db-route-table-id'